package cmpe.obstaclealert;




import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;



import cmpe.obstaclealert.BackgroundService;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.MediaScannerConnection;

import android.os.Bundle;
import android.os.Environment;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.view.Menu;



import android.widget.TextView;

public class StartSystem extends Activity{


	private int i = 0;
	private GPSService gpsListener;

	private TextView latitudeText;
	private TextView longitudeText;
	private TextView otherText;


	private static double latitude = 0;
	private static double longitude = 0;
	private static Location loc = null;
	static String gps_data = "";
	File dir;
	File file;
	FileOutputStream out;
	
//	private LocationManager locationManager;
//	private String provider;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.start_system);
		startService(new Intent(getBaseContext(), BackgroundService.class));

		latitudeText = (TextView) findViewById(R.id.latitudeText);
		longitudeText = (TextView) findViewById(R.id.longitudeText);
		otherText = (TextView) findViewById(R.id.otherText);
		gpsListener = new GPSService(this);
		if(!gpsListener.isCanGetLocation()){
			gpsListener.showSettingsAlert();
		}  
		registerReceiver(powerButtonReceiver, powerButtonPressedIntentFilter());
		File sdCard = Environment.getExternalStorageDirectory();
		dir = new File (sdCard.getAbsolutePath() + "/logs");
		dir.mkdirs();
		file = new File(dir, "EndUser.txt");
		if (file.exists ()) file.delete ();
		try {
			out = new FileOutputStream(file);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
//		// Get the location manager
//	    locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
//	    // Define the criteria how to select the locatioin provider -> use
//	    // default
//	   
//	  
//	
//		Criteria crit = new Criteria();
//		crit.setAccuracy(Criteria.ACCURACY_FINE);
//		provider = locationManager.getBestProvider(crit, false);
//		locationManager.requestLocationUpdates(provider, 0, 1, this);
//		if (locationManager != null) {
//			loc = locationManager
//					.getLastKnownLocation(provider);
//			if (loc != null) {
//				latitude = loc.getLatitude();
//				longitude = loc.getLongitude();
//			}
//		}
//		
//		updateView(String.valueOf(latitude), String.valueOf(longitude));
		String temp_gps_data ;
		if(gpsListener.isCanGetLocation()){

			latitude = gpsListener.getLatitude();
			longitude = gpsListener.getLongitude();
			// Location loc can be used if necessary
			loc = gpsListener.getLocation();
			temp_gps_data = longitude + "\t" + latitude ; 

		}else{
			temp_gps_data = gps_data ;
		}
		if(!temp_gps_data.equals(gps_data)) {
			gps_data = temp_gps_data;	
			try {
				out.write((System.currentTimeMillis() + "\t" + "GPS" + "\t" + gps_data + "\n").getBytes());
				out.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
			updateView(String.valueOf(latitude), String.valueOf(longitude));
		}
		
//		int delay = 1000 ; // delay for 1 sec. 
//		int period = 100 * 5 ; // repeat every 1 sec. 
//		Timer timer = new Timer(); 
//		timer.scheduleAtFixedRate(new TimerTask() 
//		    { 
//		        public void run() 
//		        { 
//		            onResume();  // display the data
//		        } 
//		    }, delay, period); 





	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.start_system, menu);
		return true;
	}
	@Override
	protected void onResume() {
		super.onResume();
//		Criteria crit = new Criteria();
//		crit.setAccuracy(Criteria.ACCURACY_FINE);
//		provider = locationManager.getBestProvider(crit, false);
//		locationManager.requestLocationUpdates(provider, 10000, 1, this);
//		if (locationManager != null) {
//			loc = locationManager
//					.getLastKnownLocation(provider);
//			if (loc != null) {
//				latitude = loc.getLatitude();
//				longitude = loc.getLongitude();
//			}
//		}
//		updateView(String.valueOf(latitude), String.valueOf(longitude));
			String temp_gps_data ;
			if(gpsListener.isCanGetLocation()){
				gpsListener
				latitude = gpsListener.getLatitude();
				longitude = gpsListener.getLongitude();
				// Location loc can be used if necessary
				loc = gpsListener.getLocation();
				temp_gps_data = longitude + "\t" + latitude ; 

			}else{
				temp_gps_data = gps_data ;
			}
			if(!temp_gps_data.equals(gps_data)) {
				gps_data = temp_gps_data;	
				try {
					out.write((System.currentTimeMillis() + "\t" + "GPS" + "\t" + gps_data + "\n").getBytes());
					out.flush();
				} catch (Exception e) {
					e.printStackTrace();
				}
				updateView(String.valueOf(latitude), String.valueOf(longitude));
			}
		
	}
	@Override
	protected void onPause() {
		super.onPause();
//		locationManager.removeUpdates(this);
		gpsListener.stopUsingGPS();

	}

	@Override
	protected void onDestroy() {
		super.onDestroy();

		try {
			out.close();
			MediaScannerConnection.scanFile(StartSystem.this, new String[] {file.getAbsolutePath()} , null, null); //to refresh file cache
		} catch (IOException e) {
			e.printStackTrace();
		}
		gpsListener.stopUsingGPS();
		stopService(new Intent(getBaseContext(), BackgroundService.class));

	}

	private void updateView(String latitude, String longitude){
		i++;
		try {
			out.write((provider + "\t" + longitude + "\t" + latitude +  "\n").getBytes());
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		// update all data in the UI
		latitudeText.setText(latitude);
		longitudeText.setText(longitude);
		otherText.setText(i+"");
	}
	private static IntentFilter powerButtonPressedIntentFilter() {
		final IntentFilter intentFilter2 = new IntentFilter(Intent.ACTION_SCREEN_ON);		
		intentFilter2.addAction(Intent.ACTION_SCREEN_OFF);
		return intentFilter2;
	}
	private final BroadcastReceiver powerButtonReceiver = new BroadcastReceiver() {
		@SuppressLint("DefaultLocale") @Override
		public void onReceive(Context context, Intent intent) {

			if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) 
			{

				onResume();
			} 
			else if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) 
			{
				onResume();
			}
		}
	};



}

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".StartSystem" >

    <LinearLayout
        android:id="@+id/latitudeLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" >

        <TextView
            android:id="@+id/latitudeLabel"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="@string/latitudeLabel"
            android:textAppearance="?android:attr/textAppearanceLarge" />

        <TextView
            android:id="@+id/latitudeText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/def_double"
            android:layout_weight="1"
            android:textAppearance="?android:attr/textAppearanceLarge" />

    </LinearLayout>

    <LinearLayout
        android:id="@+id/longitudeLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" >

        <TextView
            android:id="@+id/longitudeLabel"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:text="@string/longitudeLabel"
            android:layout_weight="1"
            android:textAppearance="?android:attr/textAppearanceLarge" />

        <TextView
            android:id="@+id/longitudeText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/def_double"
            android:layout_weight="1"
            android:textAppearance="?android:attr/textAppearanceLarge" />

    </LinearLayout>

  	 <LinearLayout
        android:id="@+id/otherLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" >

        <TextView
            android:id="@+id/otherLabel"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:text="@string/otherLabel"
            android:layout_weight="1"
            android:textAppearance="?android:attr/textAppearanceLarge" />

        <TextView
            android:id="@+id/otherText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/other"
            android:layout_weight="1"
            android:textAppearance="?android:attr/textAppearanceLarge" />

    </LinearLayout>
</LinearLayout>